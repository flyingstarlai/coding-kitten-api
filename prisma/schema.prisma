// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  role      Role      @default(TEACHER)
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  classrooms  Classroom[]  @relation("TeacherClassrooms")
  enrollments Enrollment[]
  scores      Score[]

  defaultClassroomId String?
  defaultClassroom   Classroom? @relation("UserDefaultClassroom", fields: [defaultClassroomId], references: [id])

  LicenseRequest LicenseRequest[]

  LicensePayment LicensePayment[]

  License License[]
}

model Classroom {
  id          String    @id @default(cuid())
  name        String
  room        String    @unique
  teacher     User      @relation("TeacherClassrooms", fields: [teacherId], references: [id])
  teacherId   String
  createdAt   DateTime  @default(now())
  maxStudents Int       @default(30)
  deletedAt   DateTime?

  enrollments     Enrollment[]
  assignedCourses AssignedCourse[]

  defaultForUsers User[] @relation("UserDefaultClassroom")

  ClassroomSession ClassroomSession[]

  LicenseRequest LicenseRequest[]

  License License[]
}

model ClassroomSession {
  id           String     @id @default(cuid())
  classroom    Classroom  @relation(fields: [classroomId], references: [id])
  classroomId  String
  code         String     @unique
  expiresAt    DateTime
  createdAt    DateTime   @default(now())
}

model Enrollment {
  id          String    @id @default(cuid())
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  classroomId String
  username    String
  student     User      @relation(fields: [studentId], references: [id])
  studentId   String
  invitedAt   DateTime  @default(now())
  joinedAt    DateTime?
  deletedAt   DateTime?

  @@unique([classroomId, username])
}

model Course {
  id              String           @id @default(cuid())
  order           Int
  title           String
  slug            String           @unique
  description     String?
  createdAt       DateTime         @default(now())
  deletedAt       DateTime?
  enable          Boolean @default(false)
  assignedCourses AssignedCourse[]
  challenges      Challenge[]
}

model Challenge {
  id           String    @id @default(cuid())
  course       Course    @relation(fields: [courseId], references: [id])
  courseId     String
  week         Int
  level        Int
  levelData    Json?
  title        String
  isLocked     Boolean   @default(true)
  description  String?
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?

  scores       Score[]

  @@unique([courseId, level])
}

model AssignedCourse {
  id            String    @id @default(cuid())
  classroom     Classroom @relation(fields: [classroomId], references: [id])
  classroomId   String
  course        Course    @relation(fields: [courseId], references: [id])
  courseId      String
  isAssigned    Boolean   @default(false)
  addedAt       DateTime  @default(now())
  deletedAt     DateTime?

  availableWeek  Int       @default(1)
  scores        Score[]   // each studentâ€™s score on each challenge

  @@unique([classroomId, courseId])
}

model Score {
  id               String           @id @default(cuid())
  student          User             @relation(fields: [studentId], references: [id])
  studentId        String
  assignedCourse   AssignedCourse   @relation(fields: [assignedCourseId], references: [id])
  assignedCourseId String
  challenge        Challenge        @relation(fields: [challengeId], references: [id])
  challengeId      String
  stars            Int              @default(0)
  updatedAt        DateTime         @updatedAt
  deletedAt        DateTime?

  @@unique([studentId, assignedCourseId, challengeId])
}

enum LicenseRequestStatus {
  PENDING_ADMIN_REVIEW
  WAITING_FOR_PAYMENT
  WAITING_APPROVAL
  APPROVED
  REJECTED
}

model LicenseRequest {
  id            String   @id @default(cuid())
  classroom     Classroom @relation(fields: [classroomId], references: [id])
  classroomId   String

  requestedBy   User     @relation(fields: [requestedById], references: [id])
  requestedById String

  durationInDays Int
  requestedMaxStudents Int

  price         Int?     // in smallest unit (e.g., rupiah)
  status        LicenseRequestStatus @default(PENDING_ADMIN_REVIEW)
  note          String?

  deadline      DateTime?

  license       License? @relation(fields: [licenseId], references: [id])
  licenseId     String?

  createdAt     DateTime @default(now())

  LicensePayment LicensePayment[]
}

enum PaymentStatus {
  PENDING
  VERIFIED
  REJECTED
}

model LicensePayment {
  id            String   @id @default(cuid())
  request       LicenseRequest @relation(fields: [requestId], references: [id])
  requestId     String

  uploadedBy    User     @relation(fields: [uploadedById], references: [id])
  uploadedById  String

  fileUrl       String
  note          String?
  status        PaymentStatus @default(PENDING)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model License {
  id            String   @id @default(cuid())
  classroom     Classroom @relation(fields: [classroomId], references: [id])
  classroomId   String

  durationInDays Int
  maxStudents    Int
  activatedAt    DateTime @default(now())
  expiredAt      DateTime

  createdBy      User     @relation(fields: [createdById], references: [id])
  createdById    String

  createdAt      DateTime @default(now())

  LicenseRequest LicenseRequest[]
}